function ...
[ ...
 parameter ...
,z_z_ ...
,z_zp__ ...
,z_x_ ...
,z_xp__ ...
,z_y_ ...
,z_yp__ ...
,f_z_ ...
,f_zp__ ...
,f_x_ ...
,f_xp__ ...
,f_y_ ...
,f_yp__ ...
,a_est_ ...
,A_est__ ...
] = ...
test_Up05_vs_Ap05_18c_helper_0_helper_0( ...
 parameter ...
, mr_dvx_trnUp05_tstAp05_nix_ ...
, AZnV_D_trnUp05_tstAp05_nix_p01_ ...
, mr_dvx_Ap05_from_trnUp05_tstAp05_nix_ ...
, AZnV_D_Ap05_from_trnUp05_tstAp05_nix_p01_ ...
);

str_thisfunction = 'test_Up05_vs_Ap05_18c_helper_0_helper_0';

na=0;
if nargin<1+na; parameter=[]; end; na=na+1;

if isempty(parameter); parameter=struct('type','parameter'); end;
if ~isfield(parameter,'tolerance_master'); parameter.tolerance_master = 1e-2; end;
tolerance_master = parameter.tolerance_master;
if ~isfield(parameter,'flag_verbose'); parameter.flag_verbose = 0; end;
flag_verbose = parameter.flag_verbose;
if ~isfield(parameter,'flag_disp'); parameter.flag_disp = 0; end;
flag_disp = parameter.flag_disp;
if ~isfield(parameter,'k_use'); parameter.k_use = 1; end;
k_use = parameter.k_use;
if ~isfield(parameter,'k_gamma'); parameter.k_gamma = 0; end;
k_gamma = parameter.k_gamma;
if ~isfield(parameter,'n_shuffle'); parameter.n_shuffle = 128; end; %<-- number of shuffles after finding each map. ;
n_shuffle = parameter.n_shuffle;

if (flag_verbose>0); disp(sprintf(' %% [entering %s]',str_thisfunction)); end;

%%%%%%%%;
% Now we try and find a mapping from loaded Ap05 to loaded Up05. ;
% For Ap05 we will use the projected values: ;
% AZnV_D_Ap05_from_trnUp05_tstAp05_nix_p01_. ;
% For Up05 we will use the projected values: ;
% AZnV_D_trnUp05_tstAp05_nix_p01_. ;
% Note that affine_point_match_1 is designed to account for the labels in the data. ;
% For this point-cloud matching we will use only case vs ctrl labels (i.e., no bicluster labels). ;
%%%%%%%%;
tmp_index_Up05_ = efind( (mr_dvx_trnUp05_tstAp05_nix_==1) | (mr_dvx_trnUp05_tstAp05_nix_==2) | (mr_dvx_trnUp05_tstAp05_nix_==3) );
Y_dy__ = transpose(AZnV_D_trnUp05_tstAp05_nix_p01_(1+tmp_index_Up05_,:));
label_Y_y_ = min(2,mr_dvx_trnUp05_tstAp05_nix_(1+tmp_index_Up05_));
tmp_index_Ap05_ = efind( (mr_dvx_Ap05_from_trnUp05_tstAp05_nix_==1) | (mr_dvx_Ap05_from_trnUp05_tstAp05_nix_==2) );
X_dx__ = transpose(AZnV_D_Ap05_from_trnUp05_tstAp05_nix_p01_(1+tmp_index_Ap05_,:));
label_X_x_ = mr_dvx_Ap05_from_trnUp05_tstAp05_nix_(1+tmp_index_Ap05_);
[parameter,a_est_,A_est__,tmp_X_dx__] = ...
affine_point_match_1(parameter,X_dx__,Y_dy__,[],[],label_X_x_,label_Y_y_);

%%%%%%%%;
% Now estimate p-value. ;
%%%%%%%%;
Up05_stack_yd__ = zeros(0,2);
Up05_stack_m_ = zeros(0,1);
tmp_index_ = efind(mr_dvx_trnUp05_tstAp05_nix_==1);
Y_yd__ = AZnV_D_trnUp05_tstAp05_nix_p01_(1+tmp_index_,:);
Up05_stack_yd__ = [Up05_stack_yd__;Y_yd__];
Up05_stack_m_ = [Up05_stack_m_;1*ones(size(Y_yd__,1),1)]; %<-- ctrl label. ;
tmp_index_ = efind(mr_dvx_trnUp05_tstAp05_nix_==2);
Y_yd__ = AZnV_D_trnUp05_tstAp05_nix_p01_(1+tmp_index_,:);
Up05_stack_yd__ = [Up05_stack_yd__;Y_yd__];
Up05_stack_m_ = [Up05_stack_m_;2*ones(size(Y_yd__,1),1)]; %<-- case label. ;
tmp_index_ = efind(mr_dvx_trnUp05_tstAp05_nix_==3);
Y_yd__ = AZnV_D_trnUp05_tstAp05_nix_p01_(1+tmp_index_,:);
Up05_stack_yd__ = [Up05_stack_yd__;Y_yd__];
Up05_stack_m_ = [Up05_stack_m_;2*ones(size(Y_yd__,1),1)]; %<-- case label, and not bicl label just yet. ;
Ap05_stack_xd__ = zeros(0,2);
Ap05_stack_m_ = zeros(0,1);
tmp_index_ = efind(mr_dvx_Ap05_from_trnUp05_tstAp05_nix_==1);
X_xd__ = AZnV_D_Ap05_from_trnUp05_tstAp05_nix_p01_(1+tmp_index_,:);
tmp_X_xd__ = transpose(a_est_ + A_est__*transpose(X_xd__));
Ap05_stack_xd__ = [Ap05_stack_xd__;tmp_X_xd__];
Ap05_stack_m_ = [Ap05_stack_m_;1*ones(size(tmp_X_xd__,1),1)]; %<-- ctrl label. ;
tmp_index_ = efind(mr_dvx_Ap05_from_trnUp05_tstAp05_nix_==2);
X_xd__ = AZnV_D_Ap05_from_trnUp05_tstAp05_nix_p01_(1+tmp_index_,:);
tmp_X_xd__ = transpose(a_est_ + A_est__*transpose(X_xd__));
Ap05_stack_xd__ = [Ap05_stack_xd__;tmp_X_xd__];
Ap05_stack_m_ = [Ap05_stack_m_;2*ones(size(tmp_X_xd__,1),1)]; %<-- case label. ;
%%%%%%%%;
[ ...
 parameter ...
,z_z_ ...
,z_zp__ ...
,z_x_ ...
,z_xp__ ...
,z_y_ ...
,z_yp__ ...
,f_z_ ...
,f_zp__ ...
,f_x_ ...
,f_xp__ ...
,f_y_ ...
,f_yp__ ...
] = ...
affine_point_match_p_0( ...
 parameter ...
,transpose(Ap05_stack_xd__) ...
,Ap05_stack_m_ ...
,transpose(Up05_stack_yd__) ...
,Up05_stack_m_ ...
);
